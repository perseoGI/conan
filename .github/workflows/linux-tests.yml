name: Linux tests

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_container:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.dockerfile_hash.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate Dockerfile checksum
        id: dockerfile_hash
        run: |
          DOCKERFILE_HASH=$(find ./.ci/docker/conan-tests -type f -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)
          echo "tag=$DOCKERFILE_HASH" >> $GITHUB_OUTPUT

      - name: Check if image exists
        id: check_image
        run: |
          if docker manifest inspect ghcr.io/${{ github.repository_owner }}/conan-tests:${{ steps.dockerfile_hash.outputs.tag }} > /dev/null 2>&1; then
            echo "status=exists" >> $GITHUB_OUTPUT
          else
            echo "status=no-image" >> $GITHUB_OUTPUT
          fi

      - name: Build and push image if not exists
        if: steps.check_image.outputs.status == 'no-image'
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/conan-tests:${{ steps.dockerfile_hash.outputs.tag }} -f ./.ci/docker/conan-tests .
          docker push ghcr.io/${{ github.repository_owner }}/conan-tests:${{ steps.dockerfile_hash.outputs.tag }}

  linux_test_suite:
    needs: build_container
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/conan-tests:${{ needs.build_container.outputs.image_tag }}
      options: --user conan
    strategy:
      matrix:
        python-version: ['3.12.3', '3.9.2', '3.8.6', '3.6.15']
        test-type: ['unittests', 'integration', 'functional']
    name: Conan ${{ matrix.test-type }} (${{ matrix.python-version }})
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: |
          pyenv global ${{ matrix.python-version }}
          python --version

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_dev.txt
          pip install -r conans/requirements_server.txt
          pip install meson

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ matrix.test-type }}" == "unittests" ]; then
            pytest test/unittests --durations=20 -n 4
          elif [ "${{ matrix.test-type }}" == "integration" ]; then
            pytest test/integration --durations=20 -n 4
          elif [ "${{ matrix.test-type }}" == "functional" ]; then
            pytest test/functional --durations=20 -n 4
          fi

  linux_docker_tests:
    needs: build_container
    runs-on: ubuntu-latest
    name: Docker Runner Tests
    strategy:
      matrix:
        python-version: [3.12, 3.9]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_dev.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_runner.txt

      - name: Run tests
        shell: bash
        run: |
          pytest -m docker_runner --durations=20 -rs

  deploy_to_pypi_test:
    needs: [build_container, linux_test_suite, linux_docker_tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop2'
    name: Deploy to TestPyPI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install twine

      - name: Bump Dev Version
        run: |
          python .ci/bump_dev_version.py

      - name: Build Package
        run: |
          python setup.py sdist

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: |
          python -m twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*

      - name: Deploy conan-server to TestPyPI
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_SERVER_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_SERVER_PASSWORD }}
        run: |
          rm -rf dist/
          mv setup_server.py setup.py
          python setup.py sdist
          python -m twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*
